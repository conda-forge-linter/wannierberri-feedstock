From 44bbfbea535ff0404d7ed12cc4d0df559505bd12 Mon Sep 17 00:00:00 2001
From: Jan Janssen <jan-janssen@users.noreply.github.com>
Date: Wed, 5 Aug 2020 18:40:22 +0200
Subject: [PATCH] Update __fermisea2.py

---
 wannierberri/__fermisea2.py | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/wannierberri/__fermisea2.py b/wannierberri/__fermisea2.py
index 5e490ab..156bfc9 100644
--- a/wannierberri/__fermisea2.py
+++ b/wannierberri/__fermisea2.py
@@ -86,11 +86,11 @@ def tensor_D(data,Efermi):
 
 def IterateEf(dataIO,data,Efermi,TRodd,Iodd,sep=False,rank=None,kwargs={}):
     """ this is a general function which accepts dataIO  -- a dictionary like {'i':i , 'io':io, ...}
-and sums for a series of Fermi levels"""
-#    funname=inspect.stack()[1][3]
-#    print ("iterating function '{}' for Efermi={}".format(funname,Efermi))
-# try to make sum better
-''' parameter dataIO can be a dictionary or a funciton. If needed use callable(dataIO) for judgment and run OCC=OccDelta(data.E_K,dataIO(op,ed),op,ed) or OCC=OccDelta(data.E_K(op,ed),dataIO(op,ed),op,ed)'''
+    and sums for a series of Fermi levels"""
+    #    funname=inspect.stack()[1][3]
+    #    print ("iterating function '{}' for Efermi={}".format(funname,Efermi))
+    # try to make sum better
+    ''' parameter dataIO can be a dictionary or a funciton. If needed use callable(dataIO) for judgment and run OCC=OccDelta(data.E_K,dataIO(op,ed),op,ed) or OCC=OccDelta(data.E_K(op,ed),dataIO(op,ed),op,ed)'''
     if sep:
         res = 0.0
         nksep = data.nkptot//data.ksep
